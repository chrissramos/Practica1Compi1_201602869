
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador2;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import Objetos.Puente;
import Objetos.Claves;
import Objetos.Variable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\021\017\000\002\006\007\000" +
    "\002\007\005\000\002\007\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\003\000\002\012\003\000\002\010" +
    "\012\000\002\010\006\000\002\010\007\000\002\016\011" +
    "\000\002\016\007\000\002\016\011\000\002\016\015\000" +
    "\002\024\014\000\002\005\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\022\003\000\002\022\003" +
    "\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\014\010\007\013\014\015\013\016\006\020" +
    "\015\001\002\000\016\002\ufffe\010\ufffe\013\ufffe\015\ufffe" +
    "\016\ufffe\020\ufffe\001\002\000\016\002\ufffc\010\ufffc\013" +
    "\ufffc\015\ufffc\016\ufffc\020\ufffc\001\002\000\004\004\111" +
    "\001\002\000\004\004\060\001\002\000\004\002\057\001" +
    "\002\000\016\002\000\010\007\013\014\015\013\016\006" +
    "\020\015\001\002\000\016\002\ufffb\010\ufffb\013\ufffb\015" +
    "\ufffb\016\ufffb\020\ufffb\001\002\000\004\032\042\001\002" +
    "\000\004\004\033\001\002\000\004\032\017\001\002\000" +
    "\016\002\ufffd\010\ufffd\013\ufffd\015\ufffd\016\ufffd\020\ufffd" +
    "\001\002\000\004\007\020\001\002\000\004\030\021\001" +
    "\002\000\004\007\022\001\002\000\004\030\023\001\002" +
    "\000\004\004\024\001\002\000\004\030\025\001\002\000" +
    "\004\007\026\001\002\000\004\030\027\001\002\000\004" +
    "\007\030\001\002\000\004\033\031\001\002\000\004\031" +
    "\032\001\002\000\016\002\ufffa\010\ufffa\013\ufffa\015\ufffa" +
    "\016\ufffa\020\ufffa\001\002\000\004\023\034\001\002\000" +
    "\004\022\035\001\002\000\004\032\036\001\002\000\004" +
    "\007\037\001\002\000\004\033\040\001\002\000\004\031" +
    "\041\001\002\000\016\002\ufff2\010\ufff2\013\ufff2\015\ufff2" +
    "\016\ufff2\020\ufff2\001\002\000\010\004\046\005\043\007" +
    "\045\001\002\000\006\030\ufff3\033\ufff3\001\002\000\006" +
    "\030\ufff7\033\ufff7\001\002\000\006\030\ufff4\033\ufff4\001" +
    "\002\000\006\030\uffea\033\uffea\001\002\000\006\030\052" +
    "\033\053\001\002\000\006\030\ufff6\033\ufff6\001\002\000" +
    "\006\030\ufff5\033\ufff5\001\002\000\010\004\046\005\043" +
    "\007\045\001\002\000\004\031\054\001\002\000\016\002" +
    "\ufff9\010\ufff9\013\ufff9\015\ufff9\016\ufff9\020\ufff9\001\002" +
    "\000\006\030\ufff8\033\ufff8\001\002\000\016\002\uffff\010" +
    "\uffff\013\uffff\015\uffff\016\uffff\020\uffff\001\002\000\004" +
    "\002\001\001\002\000\004\023\061\001\002\000\004\021" +
    "\062\001\002\000\004\032\065\001\002\000\004\031\064" +
    "\001\002\000\016\002\ufff0\010\ufff0\013\ufff0\015\ufff0\016" +
    "\ufff0\020\ufff0\001\002\000\004\004\066\001\002\000\004" +
    "\030\067\001\002\000\004\007\070\001\002\000\004\030" +
    "\071\001\002\000\012\023\073\034\075\035\076\036\074" +
    "\001\002\000\004\030\103\001\002\000\004\023\102\001" +
    "\002\000\004\023\101\001\002\000\006\023\100\030\uffe8" +
    "\001\002\000\006\023\077\030\uffe9\001\002\000\004\030" +
    "\uffe7\001\002\000\004\030\uffe6\001\002\000\004\030\uffe4" +
    "\001\002\000\004\030\uffe5\001\002\000\010\005\104\006" +
    "\105\007\106\001\002\000\004\033\uffe2\001\002\000\004" +
    "\033\uffe1\001\002\000\004\033\uffe3\001\002\000\004\033" +
    "\110\001\002\000\004\031\uffeb\001\002\000\004\023\112" +
    "\001\002\000\012\011\116\012\117\014\114\017\113\001" +
    "\002\000\004\032\144\001\002\000\004\032\132\001\002" +
    "\000\016\002\ufff1\010\ufff1\013\ufff1\015\ufff1\016\ufff1\020" +
    "\ufff1\001\002\000\004\032\124\001\002\000\004\032\120" +
    "\001\002\000\004\004\121\001\002\000\004\033\122\001" +
    "\002\000\004\031\123\001\002\000\016\002\uffee\010\uffee" +
    "\013\uffee\015\uffee\016\uffee\020\uffee\001\002\000\004\004" +
    "\125\001\002\000\004\030\126\001\002\000\004\007\127" +
    "\001\002\000\004\033\130\001\002\000\004\031\131\001" +
    "\002\000\016\002\uffef\010\uffef\013\uffef\015\uffef\016\uffef" +
    "\020\uffef\001\002\000\004\004\133\001\002\000\004\030" +
    "\134\001\002\000\004\007\135\001\002\000\004\030\136" +
    "\001\002\000\012\023\073\034\075\035\076\036\074\001" +
    "\002\000\004\030\140\001\002\000\010\005\104\006\105" +
    "\007\106\001\002\000\004\033\142\001\002\000\004\031" +
    "\143\001\002\000\016\002\uffec\010\uffec\013\uffec\015\uffec" +
    "\016\uffec\020\uffec\001\002\000\004\004\145\001\002\000" +
    "\004\030\146\001\002\000\004\007\147\001\002\000\004" +
    "\033\150\001\002\000\004\031\151\001\002\000\016\002" +
    "\uffed\010\uffed\013\uffed\015\uffed\016\uffed\020\uffed\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\016\002\007\003\010\004\003\006\004\010" +
    "\015\021\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\055\006\004\010\015\021\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\047\007\046\011\043\012\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\047\011\054\012\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\136\001\001\000\002" +
    "\001\001\000\004\022\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
   
        
    int cantidadClaves = 0;
    //public static ArrayList<Variable> arregloVariables = new ArrayList();
    //HtmlClase c = new HtmlClase();
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/
   // public static consolaE = "";
    public String resultado = "";
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
         //   TablaErr.add(datos);
            */
           //  ErrorLS er = new ErrorLS("Sintactico","",lexema,fila,columna);
             //HtmlClase.arrError.add(er);


    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico2$actions {


//METODOS Y VARIABLES QUE SOLO PUEDEN SER ACCEDIDAS DENTRO DEL PARSER
int exponente(int exp){
    int resultado= 1;
    for(int i=1; i<exp; i++){
        resultado = resultado *2;
    }
    return resultado;
}


  private final Sintactico2 parser;

  /** Constructor */
  CUP$Sintactico2$actions(Sintactico2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico2$do_action_part00000000(
    int                        CUP$Sintactico2$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico2$parser,
    java.util.Stack            CUP$Sintactico2$stack,
    int                        CUP$Sintactico2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico2$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico2$parser.done_parsing();
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CONTENIDO 
            {
              String RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTENIDO ::= CONTENIDO LISTAC 
            {
              String RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTENIDO ::= LISTAC 
            {
              String RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTAC ::= DEFINICION 
            {
              String RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LISTAC",2, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTAC ::= FIMPRIMIR 
            {
              String RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LISTAC",2, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTAC ::= GRAFICA 
            {
              String RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LISTAC",2, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GRAFICA ::= graficar parA cadena coma cadena coma identificador coma cadena coma cadena parC puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		Puente.graficar(a,b,c,d,e);
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("GRAFICA",15, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FIMPRIMIR ::= imprimir parA LISTAIMP parC puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		
                String consola = a +"\n";
                System.err.println("IMPRIMIR: " + consola);
                Puente.variableConsola += consola; 
                
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FIMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTAIMP ::= LISTAIMP coma OBJETOIMP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		
                    System.err.println("LISTA:: " + a + " "+b);
                    RESULT = a + b;
                
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LISTAIMP",5, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTAIMP ::= OBJETOIMP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		
                    RESULT=a;
                
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LISTAIMP",5, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OBJETOIMP ::= VARIABLE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OBJETOIMP",7, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OBJETOIMP ::= MENSAJE 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		 RESULT = b; 
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OBJETOIMP",7, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MENSAJE ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		 System.err.println("entrando cadena> " + a);
                String nuevaCadena = a.replace("\"", " ");
                RESULT = nuevaCadena; 
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("MENSAJE",8, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MENSAJE ::= digito 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		 RESULT =  b; 
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("MENSAJE",8, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEFINICION ::= archivo identificador igual leerArchivo parA cadena parC puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		
                
                Puente.analizarDatos(a,b);
             
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("DEFINICION",6, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEFINICION ::= numerico identificador igual FUNCION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		
                    if(b.equals("suma")){
                        int posicion = Puente.arrVariables.size() -1;
                        Variable v = (Variable)Puente.arrVariables.get(posicion);
                        v.setIdentificador(a);
                        //JOptionPane.showMessageDialog(null, "Se creo var: " + v.getTipo()+ " " + v.getIdentificador() + " " + v.getValorInt());
                     } else if(b.equals("contar")){
                            int posicion = Puente.arrVariables.size() -1;
                            Variable v2 = (Variable)Puente.arrVariables.get(posicion);
                            v2.setIdentificador(a);
                        }else if(b.equals("promedio")){
                            int posicion = Puente.arrVariables.size() -1;
                            Variable v3 = (Variable)Puente.arrVariables.get(posicion);
                            v3.setIdentificador(a);
                        }else if(b.equals("tcontar")){
                            int posicion = Puente.arrVariables.size() -1;
                            Variable v4 = (Variable)Puente.arrVariables.get(posicion);
                            v4.setIdentificador(a);
                            //JOptionPane.showMessageDialog(null,"llego aqii");
                        }
                     
                            
                    
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("DEFINICION",6, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFINICION ::= tcadena identificador igual FOBTENERSI puntocoma 
            {
              String RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		
                    int posicion = Puente.arrVariables.size() -1;
                    Variable f = (Variable)Puente.arrVariables.get(posicion);
                    f.setIdentificador(g);
                
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("DEFINICION",6, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCION ::= sumar parA identificador coma cadena parC puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		
                String resultado = Puente.sumar(a,b);
                Variable v = new Variable();
                //v.setIdentificador(a);
                v.setTipo("Double");
                
                v.setValorDouble(Double.parseDouble(resultado));
                Puente.arrVariables.add(v);
                //JOptionPane.showMessageDialog(null, "ESTAMOS EN FUNCION ABAJO");
                //JOptionPane.showMessageDialog(null, "TIPO: " + v.getTipo() + " Id: "+ v.getIdentificador() + " valor: " + v.getValorInt());
                RESULT = "suma";
            
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION ::= contar parA identificador parC puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		
                String resultado2 = Puente.contar(a);
                Variable v2 = new Variable();
                v2.setTipo("Numerico");
                v2.setValorInt(Integer.parseInt(resultado2));
                Puente.arrVariables.add(v2);
                RESULT="contar";
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCION ::= promedio parA identificador coma cadena parC puntocoma 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		
                String resultado3 = Puente.promedio(e,f);
                JOptionPane.showMessageDialog(null,"PROMEDIO RECIBIDO: " + resultado3 );
                Variable v3 = new Variable();
                v3.setTipo("Double");
                v3.setValorDouble(Double.parseDouble(resultado3));
                Puente.arrVariables.add(v3);
                RESULT = "promedio";
            
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION ::= tcontarSi parA identificador coma cadena coma OPREL coma VALORSI parC puntocoma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		  String resultado4 = Puente.contarSi(a,b,c,d);
                JOptionPane.showMessageDialog(null, "contadorrrr: " + resultado4);
                Variable v4 = new Variable();
                v4.setTipo("Numerico");
                v4.setValorInt(Integer.parseInt(resultado4));
                Puente.arrVariables.add(v4);
                RESULT="tcontar";
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FOBTENERSI ::= obtenerSi parA identificador coma cadena coma OPREL coma VALORSI parC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		String resultado5 = Puente.obtenerSi(a,b,c,d);
                Variable v5 = new Variable();
                v5.setTipo("Cadena");
                v5.setValorString(resultado5);
                Puente.arrVariables.add(v5);
                RESULT= "a";
                
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FOBTENERSI",18, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARIABLE ::= identificador 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		
                for(int i=0;i<Puente.arrVariables.size();i++){
                    Variable v = (Variable)Puente.arrVariables.get(i);
                    //JOptionPane.showMessageDialog(null, "Se buscara: "+ v.getTipo() + " y: " + v.getIdentificador() );
                    if(v.getTipo().equals("Numerico") && v.getIdentificador().equals(a) ){
                        //JOptionPane.showMessageDialog(null,"Se encontro variable y tiene valor:" + v.getValorInt());
                        RESULT = Integer.toString(v.getValorInt());
                    }else if(v.getTipo().equals("Double") && v.getIdentificador().equals(a)){
                        //JOptionPane.showMessageDialog(null,"Se encontro variable prom y tiene valor:" + v.getValorDouble());
                          RESULT = String.valueOf(v.getValorDouble());  
                    }else if(v.getTipo().equals("Cadena") && v.getIdentificador().equals(a)){
                        //JOptionPane.showMessageDialog(null,"Se encontro variable prom y tiene valor:" + v.getValorDouble());
                          RESULT = v.getValorString();
                    }
                    
                }
            
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("VARIABLE",3, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPREL ::= mayorque 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPREL",17, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPREL ::= menorque 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=b;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPREL",17, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPREL ::= mayorque igual 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT= c + d;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPREL",17, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPREL ::= menorque igual 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=e+f;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPREL",17, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPREL ::= igual igual 
            {
              String RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=g+h;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPREL",17, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPREL ::= desigual igual 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=i+j;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPREL",17, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALORSI ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		  String enviar = a.replace("\"", "");
                RESULT=enviar;
            
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("VALORSI",16, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALORSI ::= digito 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		
                RESULT=b;
            
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("VALORSI",16, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALORSI ::= decimal 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		
                RESULT=c;
            
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("VALORSI",16, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico2$do_action(
    int                        CUP$Sintactico2$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico2$parser,
    java.util.Stack            CUP$Sintactico2$stack,
    int                        CUP$Sintactico2$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico2$do_action_part00000000(
                               CUP$Sintactico2$act_num,
                               CUP$Sintactico2$parser,
                               CUP$Sintactico2$stack,
                               CUP$Sintactico2$top);
    }
}

}
