
/*----------------------------------------------------------------------------
--------------------- 1ra. Area: Codigo de Usuario
----------------------------------------------------------------------------*/

//-------> Importaciones 
//-------> Paquetes  

package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import Objetos.Claves;
import Objetos.Puente;



//-------> Codigo para el parser, variables, metodos

parser code
{:  
    int cantidadClaves = 0;
    int posicionArr = 0;
    //public static ArrayList<Variable> arregloVariables = new ArrayList();
    //HtmlClase c = new HtmlClase();
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/
   // public static consolaE = "";
    public String resultado = "";
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
         //   TablaErr.add(datos);
            */
           //  ErrorLS er = new ErrorLS("Sintactico","",lexema,fila,columna);
             //HtmlClase.arrError.add(er);


    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}

:}


//-------> Codigo para las acciones gramaticales

action code
{:
//METODOS Y VARIABLES QUE SOLO PUEDEN SER ACCEDIDAS DENTRO DEL PARSER
int exponente(int exp){
    int resultado= 1;
    for(int i=1; i<exp; i++){
        resultado = resultado *2;
    }
    return resultado;
}

:}  



/*----------------------------------------------------------------------------
--------------------- 2da. Area: Declaraciones
----------------------------------------------------------------------------*/




//-------> Simbolos
terminal String identificador,digito,decimal,cadena;

terminal String claves, registros;

terminal String igual, llaveA, llaveC,corA, corC, coma; 

non terminal String  INICIO, CONTENIDO, LISTAC, CLAVESS, REGISTROSS, LISTACLAVES, MASCLAVES;
non terminal String LISTAREG, REGG, NUEVOSREG, NREG;


start with INICIO;

INICIO::= CONTENIDO
{: JOptionPane.showMessageDialog(null, "ANALISIS COMPLETO SIN ERRORES SINTACTICOS");
     :};
CONTENIDO::= CONTENIDO LISTAC
            |LISTAC;
LISTAC::= CLAVESS:c
           {:   
                //JOptionPane.showMessageDialog(null, "Las claves son: " + c);
                //JOptionPane.showMessageDialog(null, "cantidad de claves: " + cantidadClaves); :} 
        |REGISTROSS;

CLAVESS::= claves igual corA LISTACLAVES:a corC
                    {:
                        RESULT = a;
                        :};

LISTACLAVES::= LISTACLAVES:a coma MASCLAVES:b
                {:RESULT = a + b; :}
                | MASCLAVES:c
                    {:RESULT = c;:};

 MASCLAVES::= cadena:a
            {:
                String nuevaCadena = a.replace("\"", "");
                cantidadClaves += 1;
                Claves c = new Claves();
                 c.setClave(nuevaCadena);
                 Puente.arrClaves.add(c);
                RESULT = nuevaCadena + ".";
                :}
                |digito:b
                    {:
                       RESULT = b; :};


REGISTROSS::= registros igual corA LISTAREG corC;



LISTAREG::= LISTAREG REGG
            |REGG;

REGG::= llaveA NUEVOSREG llaveC 
            {:posicionArr =0;:};

NUEVOSREG::= NUEVOSREG coma NREG
             |NREG;

NREG::= cadena:a
            {:
                String nuevaCadena = a.replace("\"", "");
                posicionArr += 1;
                Puente.buscarClave(nuevaCadena,posicionArr);
                RESULT = a;
            :}
        |digito:b
            {:
                posicionArr += 1;
                Puente.buscarClave(b,posicionArr);
            RESULT=b; :}; 

