
/*----------------------------------------------------------------------------
--------------------- 1ra. Area: Codigo de Usuario
----------------------------------------------------------------------------*/

//-------> Importaciones 
//-------> Paquetes  

package Analizador2;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import Objetos.Puente;
import Objetos.Claves;
import Objetos.Variable;



//-------> Codigo para el parser, variables, metodos

parser code
{:  
   
        
    int cantidadClaves = 0;
    //public static ArrayList<Variable> arregloVariables = new ArrayList();
    //HtmlClase c = new HtmlClase();
    /*public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();*/
   // public static consolaE = "";
    public String resultado = "";
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
       
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado"));
        /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado");
         //   TablaErr.add(datos);
            */
           //  ErrorLS er = new ErrorLS("Sintactico","",lexema,fila,columna);
             //HtmlClase.arrError.add(er);


    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

       /*AcepErr datos =new AcepErr(lexema, "ERROR SINTACTICO" ,fila,columna,"Simbolo no esperado Error Fatal");
                   TablaErr.add(datos);
                  */
        //lista_errores.add(new ErrorT(lexema, fila, columna,"sintactico" ,"Simbolo no esperado, Panic Mode"));
    }

    public void semantic(Symbol cur_token, String n) 
    {
        System.out.println("error semantico ");
    }

    public void semantic(String msg, Object obj) {}

:}


//-------> Codigo para las acciones gramaticales

action code
{:
//METODOS Y VARIABLES QUE SOLO PUEDEN SER ACCEDIDAS DENTRO DEL PARSER
int exponente(int exp){
    int resultado= 1;
    for(int i=1; i<exp; i++){
        resultado = resultado *2;
    }
    return resultado;
}

:}  



/*----------------------------------------------------------------------------
--------------------- 2da. Area: Declaraciones
----------------------------------------------------------------------------*/




//-------> Simbolos
terminal String identificador,digito,decimal,cadena,tcadena;

terminal String sumar, contar, archivo, contarSi, imprimir, numerico, promedio, graficar, obtenerSi, leerArchivo;

terminal String igual, llaveA, llaveC,corA, corC, coma, puntocoma, parA, parC, menorque, mayorque, desigual, dospuntos; 

non terminal String  INICIO, CONTENIDO, LISTAC, VARIABLE, FIMPRIMIR, LISTAIMP, DEFINICION, OBJETOIMP, MENSAJE;
non terminal String ARCHIVODEF, ARCHIVO, DEF, FUNCION, FUNC, LISTADEFF;



start with INICIO;

INICIO::= CONTENIDO;

CONTENIDO::= CONTENIDO LISTAC
            |LISTAC;

LISTAC::= DEFINICION
            |FIMPRIMIR;
           


FIMPRIMIR::= imprimir parA LISTAIMP:a parC puntocoma
            {:
                String consola = a +"\n";
                System.err.println("IMPRIMIR: " + consola);
                Puente.variableConsola += consola; 
                :};

LISTAIMP::= LISTAIMP:a coma OBJETOIMP:b
                {:
                    System.err.println("LISTA:: " + a + " "+b);
                    RESULT = a + b;
                :}
            |OBJETOIMP:a
                {:
                    RESULT=a;
                :};

OBJETOIMP::= VARIABLE:a
                {:RESULT=a;:}
            |MENSAJE:b
                {: RESULT = b; :};
            

MENSAJE::= cadena:a
            {: System.err.println("entrando cadena> " + a);
                String nuevaCadena = a.replace("\"", " ");
                RESULT = nuevaCadena; :}
            |digito:b
                {: RESULT =  b; :};

DEFINICION::= archivo identificador:a igual leerArchivo parA cadena:b parC puntocoma
            {:
                
                Puente.analizarDatos(a,b);
             :}
            |numerico identificador:a igual FUNCION:b 
                {:
                    if(b.equals("suma")){
                        int posicion = Puente.arrVariables.size() -1;
                        Variable v = (Variable)Puente.arrVariables.get(posicion);
                        v.setIdentificador(a);
                        //JOptionPane.showMessageDialog(null, "Se creo var: " + v.getTipo()+ " " + v.getIdentificador() + " " + v.getValorInt());
                     } else if(b.equals("contar")){
                            
                        }
                     
                            
                    :}
            | tcadena identificador igual;

/***

FUNCION::= FUNCION:a FUNC:b
            |FUNC:c; 

***///
FUNCION::= sumar parA identificador:a coma cadena:b parC puntocoma

            {:
                String resultado = Puente.sumar(a,b);
                Variable v = new Variable();
                //v.setIdentificador(a);
                v.setTipo("Numerico");
                v.setValorInt(Integer.parseInt(resultado));
                Puente.arrVariables.add(v);
                //JOptionPane.showMessageDialog(null, "ESTAMOS EN FUNCION ABAJO");
                //JOptionPane.showMessageDialog(null, "TIPO: " + v.getTipo() + " Id: "+ v.getIdentificador() + " valor: " + v.getValorInt());
                RESULT = "suma";
            :}
        |contar parA identificador parC puntocoma
            {:RESULT="contar";:};
            

VARIABLE::= identificador:a
            {:
                for(int i=0;i<Puente.arrVariables.size();i++){
                    Variable v = (Variable)Puente.arrVariables.get(i);
                    JOptionPane.showMessageDialog(null, "Se buscara: "+ v.getTipo() + " y: " + v.getIdentificador() );
                    if(v.getTipo().equals("Numerico") && v.getIdentificador().equals(a) ){
                        JOptionPane.showMessageDialog(null,"Se encontro variable y tiene valor:" + v.getValorInt());
                        RESULT = Integer.toString(v.getValorInt());
                    }
                }
            :};
